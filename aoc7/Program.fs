open Intcode

let input = [| 3; 8; 1001; 8; 10; 8; 105; 1; 0; 0; 21; 38; 59; 84; 97; 110; 191; 272; 353; 434; 99999; 3; 9; 1002; 9; 2; 9; 101; 4; 9; 9; 1002; 9; 2; 9; 4; 9; 99; 3; 9; 102; 5; 9; 9; 1001; 9; 3; 9; 1002; 9; 5; 9; 101; 5; 9; 9; 4; 9; 99; 3; 9; 102; 5; 9; 9; 101; 5; 9; 9; 1002; 9; 3; 9; 101; 2; 9; 9; 1002; 9; 4; 9; 4; 9; 99; 3; 9; 101; 3; 9; 9; 1002; 9; 3; 9; 4; 9; 99; 3; 9; 102; 5; 9; 9; 1001; 9; 3; 9; 4; 9; 99; 3; 9; 101; 2; 9; 9; 4; 9; 3; 9; 102; 2; 9; 9; 4; 9; 3; 9; 101; 1; 9; 9; 4; 9; 3; 9; 1002; 9; 2; 9; 4; 9; 3; 9; 1002; 9; 2; 9; 4; 9; 3; 9; 101; 2; 9; 9; 4; 9; 3; 9; 1001; 9; 2; 9; 4; 9; 3; 9; 102; 2; 9; 9; 4; 9; 3; 9; 101; 2; 9; 9; 4; 9; 3; 9; 1002; 9; 2; 9; 4; 9; 99; 3; 9; 1002; 9; 2; 9; 4; 9; 3; 9; 1002; 9; 2; 9; 4; 9; 3; 9; 1002; 9; 2; 9; 4; 9; 3; 9; 101; 1; 9; 9; 4; 9; 3; 9; 1002; 9; 2; 9; 4; 9; 3; 9; 101; 1; 9; 9; 4; 9; 3; 9; 101; 2; 9; 9; 4; 9; 3; 9; 1001; 9; 1; 9; 4; 9; 3; 9; 1001; 9; 1; 9; 4; 9; 3; 9; 1001; 9; 2; 9; 4; 9; 99; 3; 9; 1001; 9; 2; 9; 4; 9; 3; 9; 1002; 9; 2; 9; 4; 9; 3; 9; 102; 2; 9; 9; 4; 9; 3; 9; 1002; 9; 2; 9; 4; 9; 3; 9; 1001; 9; 2; 9; 4; 9; 3; 9; 1001; 9; 2; 9; 4; 9; 3; 9; 1001; 9; 1; 9; 4; 9; 3; 9; 1002; 9; 2; 9; 4; 9; 3; 9; 102; 2; 9; 9; 4; 9; 3; 9; 1002; 9; 2; 9; 4; 9; 99; 3; 9; 101; 2; 9; 9; 4; 9; 3; 9; 101; 1; 9; 9; 4; 9; 3; 9; 102; 2; 9; 9; 4; 9; 3; 9; 101; 1; 9; 9; 4; 9; 3; 9; 101; 2; 9; 9; 4; 9; 3; 9; 101; 1; 9; 9; 4; 9; 3; 9; 102; 2; 9; 9; 4; 9; 3; 9; 1001; 9; 2; 9; 4; 9; 3; 9; 1002; 9; 2; 9; 4; 9; 3; 9; 1002; 9; 2; 9; 4; 9; 99; 3; 9; 1001; 9; 1; 9; 4; 9; 3; 9; 102; 2; 9; 9; 4; 9; 3; 9; 102; 2; 9; 9; 4; 9; 3; 9; 1001; 9; 2; 9; 4; 9; 3; 9; 101; 1; 9; 9; 4; 9; 3; 9; 1002; 9; 2; 9; 4; 9; 3; 9; 1001; 9; 1; 9; 4; 9; 3; 9; 102; 2; 9; 9; 4; 9; 3; 9; 1001; 9; 2; 9; 4; 9; 3; 9; 101; 1; 9; 9; 4; 9; 99 |]

let rec insertions x = function
    | (y :: ys) as l -> (x::l)::(List.map (fun x -> y::x) (insertions x ys))
    | [] -> [[x]]

let rec permutations = function
    | x :: xs -> Seq.concat (Seq.map (insertions x) (permutations xs))
    | [] -> seq [ [] ]

let part1 () =
    permutations [ 0; 1; 2; 3; 4 ]
    |> Seq.map (List.fold (fun state phase -> List.last <| Computer.runWithOutput (Some <| Computer.Input.Draining [phase; state]) (Array.copy input)) 0)
    |> Seq.max

[<EntryPoint>]
let main argv =
    //let testInput = [| 3; 26; 1001; 26; -4; 26; 3; 27; 1002; 27; 2; 27; 1; 27; 26; 27; 4; 27; 1001; 28; -1; 28; 1005; 28; 6; 99; 0; 0; 5 |]
    
    //let result =
    //    permutations [ 9; 8; 7; 6; 5 ]
    //    |> Seq.map (List.fold (fun state phase -> List.last <| Computer.runWithOutput (Some <| Computer.Input.Draining [phase; state]) (Array.copy input)) 0)
    //    |> Seq.max

    printfn "%d" (part1 ())
    0 // return an integer exit code
